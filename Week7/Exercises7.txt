-------------------------------------------------------------------------------------------
EXERCISE 7.2
-------------------------------------------------------------------------------------------


6.  Implement method void forEach(Consumer<K,V> consumer). Apparently, this may be implemented 
    in two ways: either (1) iterate through the buckets as in the SynchronizedMap<K,V> 
    implementation; or (2) iterate over the stripes, and for each stripe iterate over the 
    buckets that belong to that stripe.

    It seems that (1) requires locking on all stripes before iterating over the buckets. 
    Otherwise an intervening reallocateBuckets call on another thread may replace the 
    buckets array with one of a different size between observing the length of the array 
    and accessing its elements. It does not work to just obtain a copy bs of the buckets 
    field, because reallocateBuckets destructively redistributes item node lists from the 
    old buckets array to the new one.

    It seems that (2) can be implemented by locking only stripe-wise and then iterating 
    over the stripe’s buckets. While holding the lock on a stripe, no reallocateBuckets 
    can happen.

    Explain what version you have implemented and why.

𝐀𝐍𝐒𝐖𝐄𝐑:    We used iterator over the stripes 
            This method only locks each lock once and therfore saves time regarding locking
            This way we make sure that no reallocation happens while we loop through the stripes and buckets.



7.  What advantages are there to using a small number (say 32 or 16) of stripes instead 
    of simply having a stripe for each entry in the buckets table? Discuss.

𝐀𝐍𝐒𝐖𝐄𝐑:     It is better to use a smaller amount of locks in regards of memory utilization, more locks require more memory     
            It would also be very costly to lock all of the locks if we needed to change the data structure (ex reallocateBuckets)



8.  Why can using 32 stripes improve performance even if one never runs more than, say, 
    16 threads? Discuss.

𝐀𝐍𝐒𝐖𝐄𝐑:    It is good if you have more stripes if your data structure is large. The threads access the entry independently so if you have a 
            lower amount of stripes the chance of several threads trying to access the same lock is bigger, so by using 32 stripes we
            minimize the probability of threads calling the same lock.

