2.1
Consider the situation where we need a simple class for storing and retrieving person objects from a database.
The Person class should have id, name, zip and address. It should be possible to change zip and address together,
it is not necessary to be able to change name. The id must not be able to be changed. It should be possible to get
the values of all fields.
In addition, the Person class should be able to give each person a unique id (a long). Each new instance of Person
gets an id one higher than the previous. It should be possible to set the id sequence to generate id from a specific
value.
1. Write the class so that no race conditions can arise, neither with updating a Person object, nor with generating
new Person objects.

ANSWER: See Person.java

2. Write a main method which starts a number of threads that each generate Person objects, and try to argue
or show that the id generator works and do not suffer from race-conditions.

ANSWER: The count is a static field keeping track of how many Person object are created.
Every time we run the code, the id adds one to the previously generated id. Since the count is a static
field and the methods accesing it are synchronized, that means that the threads are waiting to obtain the lock. 
Therefor no two threads can create an object at the same time.


3. Did your solution to the previous question prove that no race-condition exist, or did it give evidence that no
race condition exist.

ANSWER: THe evidence is that the id generator works as it should be, we tested it with different ranges (100, 1000, 50000) and there 
were no duplicates, and the count added up to what was expected. See the output.txt (for range 50000) and Person.java
class.


Green
1. Compile and run the example as is. Do you observe the "main" thread’s write to mi.value remains
invisible to the t thread, so that it loops forever?

ANSWER: Yes, thread t enters an infinite loop, and it doesn't see what the main thread does.


2. Now declare both the get and set methods synchronized, compile and run. Does thread t terminate
as expected now?
ANSWER: Yes, both threads terminate. The writes from the main thread are visible to thread t.

3. Now remove the synchronized modifier from the get methods. Does thread t terminate as expected
now? If it does, is that something one should rely on? Why is synchronized needed on both methods
for the reliable communication between the threads?

ANSWER: No, it does not terminate. Synchronized is needed on both methods because the updated value will 
be visible to all threads. Whereas now, it is only visible to the main. 

Yellow
4. Remove both synchronized declarations and instead declare field value to be volatile. Does
thread t terminate as expected now? Why should it be sufficient to use volatile and not synchronized
in class MutableInteger

ANSWER: It does terminate. 
It works in this case because there is only one thread writing to the value, but it
should not be relied on, because if there are more threads writing to the value there is no guarantee that the 
threads would see the most up to date value.


2.3
Consider class DoubleArrayList in TestLocking1.java. It implements an array list of numbers,
and like Java’s ArrayList it dynamically resizes the underlying array when it has become full.

Green
1. Explain the simplest natural way to make class DoubleArrayList thread-safe so it can be used from multiple
concurrent threads.
ANSWER:The simplest way to make the class thread-safe is to synchronize all the methods it has. 
See TestLocking1.java


2. Discuss how well the thread-safe version of the class is likely scale if a large number of threads call get,
add and set concurrently.

ANSWER: It is not going to scale well, because the threads have to wait for each other to obtain and release the 
lock.


Yellow
3. Now your notorious colleague Ulrik Funder suggests to improve the code by introducing a separate lock for
each method, roughly as follows:

Would this achieve thread-safety? Explain why not. Would it achieve visibility? Explain why not.

ANSWER: It would not achieve thread-safety because they will lock on different objects. For example thread A
is executing the add method because it locks on the addLock object hence thread B cannot acces the same add method
but it can access the set method, because that method is locked on a different object called setLock. So as a result,
we might get wrong results.
It doesn't achieve visibility because they are synchronized on different objects.

See TestLocking1.java

2.4
Consider the extended class DoubleArrayList in TestLocking2.java. Like the class in the previous exercise it
implements an array list of numbers, but now also has a static field totalSize that maintains a count of all the
items ever added to any DoubleArrayList instance.
It also has a static field allLists that contains a hashset of all the DoubleArrayList instances created. There
are corresponding changes in the add method and the constructor.
1. Explain how one can make the class thread-safe enough so that the totalSize field is maintained correctly
even if multiple concurrent threads work on multiple DoubleArrayList instances at the same time.
You may ignore the allLists field for now.

ANSWER: We create a new synchronized static method to increment totalSize.  So since it is a static field, all
instances of the class share the static field. And also the static method is shared. 
See the code in TestLocking2.java

2. Explain how one can make the class thread-safe enough so that the allLists field is maintained correctly
even if multiple concurrent threads create new DoubleArrayList instances at the same time.
