
MemoryLeak
Week1

------------------------------------------------------------------------------------------------------------
EXERCISES 1.1
------------------------------------------------------------------------------------------------------------
üü¢ Green ---------------------------------------------------------------------------------------------------

    1.  The main method creates a LongCounter object. The nit creates and starts two threads that run 
    concurrently, and each increments the count field 10 million times by calling method increment.

    What kind of final values do you get when the increment method is not synchronized?
    ---------------------------------------------------------------------------------------------------------

ANSWER: Every time when we run the code we get different results. 
        values: 10 028 585 / 19 793 298 / 19 507 082


üü¢ Green ---------------------------------------------------------------------------------------------------

    2.  Reduce the counts value from 10 million to 100, recompile, and rerun the code. 
    It is now likely that you get the correct result (200) in every run. Explain how this could be. 
    Would you consider this software correct, in the sense that you would guarantee that it always 
    gives 200?
    ---------------------------------------------------------------------------------------------------------

ANSWER: The counter gives different results because the increment method is not atomic and it creates
        race condition issues. When the two threads runs simultaneouly without synchronization one
        thread is put back to runnable before being able to write the value that was just updated.
        The software might not show the mistake imediatelly when ran but i will definitely crash over time.
        Therefore, the software is not considered correct because there is no 
        guarantee that it will always return the right result. 
        ??????????????????????
        

üü¢ Green ---------------------------------------------------------------------------------------------------

    3. The increment method in LongCounter uses the assignment count = count + 1;
    to add one to count. This could be expressed also as count += 1 or as count ++.

    Do you think it would make any difference to use one of these forms instead? Why? 
    Change the code and run it. Do you see any difference in the results for any of these alternatives?
    ---------------------------------------------------------------------------------------------------------

ANSWER: We don't see any changes when running the code. We still get wrong values, the increment method
        is still not atomic.


üü° Yellow --------------------------------------------------------------------------------------------------

    4.  Decompile the methods increment from above to see the byte code in the three versions 
    (as is, +=, ++). The basic decompiler is javap. Does that verify or refuse the explanation you made earlier?
    ---------------------------------------------------------------------------------------------------------

ANSWER: 

 for count = count +1;
 public void increment();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field count:J
       5: lconst_1
       6: ladd
       7: putfield      #2                  // Field count:J
      10: return

for count++
 public void increment();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field count:J
       5: lconst_1
       6: ladd
       7: putfield      #2                  // Field count:J
      10: return


for count +=1
public void increment();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field count:J
       5: lconst_1
       6: ladd
       7: putfield      #2                  // Field count:J
      10: return

    After decomposing the increment method our assumption we get wrong results because the method is not automic 
    verifies. There might be a difference in the way the values are put on the stack, but the
    final result still gives wrong values. 
üü° Yellow --------------------------------------------------------------------------------------------------

    5.  Extend the LongCounter class with a decrement() method which subtracts 1 from the count field.
    Change the code in main so that t1 calls decrement 10 million times, and t2 calls increment 
    10 million times, on a LongCounter instance. In particular, initialize main‚Äôs counts variable 
    to 10 million as before.

    What should the final value be, after both threads have completed?
    Note that decrement is called only from one thread, and increment is called only from another thread. 

    So do the methods have to be synchronized for the example to produce the expected final value? 
    Explain why (or why not).
    ---------------------------------------------------------------------------------------------------------

ANSWER: Look at the file called LongCounterDecrement.java
        The final value of count after running the code should be 0
        However, this result is not achieved because the methods are not synchronized and cannot run automically.
        One thread might increment the count while the other one is still not finish writting the value form the decrement call

        If the methods are synchronized then the methods are automic(executed as a single operation). Meaning
        no interruption can happen while the value is read-modified-writen. The firts threads reads-modifies-writes the value,
        when this is executed the second thread comes and reads-modifies-writes the value. In this case we always 
        get the right final result for count
    



------------------------------------------------------------------------------------------------------------
EXERCISE 1.2 
------------------------------------------------------------------------------------------------------------
üü° Yellow --------------------------------------------------------------------------------------------------

    The example code "TestCountPrimes" show how one can speed up a program by using more parallel threads 
    - up to a certain level which is hardware dependent. Try with different values of the parameter 
    threadCount to show how many hardware threads your implementation of Java can support.
    --------------------------------------------------------------------------------------------------------

ANSWER:


------------------------------------------------------------------------------------------------------------
  EXERCISE 1.3 

  Consider this class, whose print method prints a dash ‚Äú-‚Äù, waits for 50 milliseconds, and then prints 
  a vertical bar ‚Äú|‚Äù:

      class Printer {
          public void print() {
              System.out.print("-");
              try { Thread.sleep(50); 
              } catch (InterruptedException exn) { 
            
              } System.out.print("|");
      } }
------------------------------------------------------------------------------------------------------------
üü¢ Green ---------------------------------------------------------------------------------------------------

  1.  Write a program that creates a Printer object p, and then creates and starts two threads. 
      Each thread must call p.print() forever. You will observe that most of the time the dash and bar 
      symbols alternate neatly as in -|-|-|-|-|-|-|.
      But occasionally two bars are printed in a row, or two dashes are printed in a row, creating 
      small ‚Äúweaving faults‚Äù like those shown below:

    |-|-|-||--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|- 
    |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|- 
    |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|- 
    |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|- 
    |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-||-- 
    |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|- 
    |-|-|-|-|-|-|-|-|-||--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|- 
    |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|- 
    |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-

    --------------------------------------------------------------------------------------------------------

ANSWER: See Printer.java
        


üü¢ Green ---------------------------------------------------------------------------------------------------

    2.  Describe a scenario involving the two threads where this happens.
    ---------------------------------------------------------------------------------------------------------

ANSWER: It happens when the print mehtod is not synchronized.
        When the two threads are running simultaneouly and the print method is not synchromized, 
        then the print mehod cannot be excuted atomically and a race condition issue apppears. 
        ??????????


üü¢ Green ----------------------------------------------------------------------------------------------------

    3.  Making method print synchronized should prevent this from happening. 
    Compile and run the improved program to see whether it works. Explain why.
    ---------------------------------------------------------------------------------------------------------

ANSWER: It works, because the threads are not accessing the method simultaniously. 
        The first thread takes a lock goes into the method print the statements and then releases the lock.
        then the second thread takes the lock, goes into the method prints the statements and releases the lock
        This process repeats indefinite number of times



üü¢ Green ----------------------------------------------------------------------------------------------------

    4. Rewrite print to use a synchronized statement in its body instead of the method being synchronized.
    ---------------------------------------------------------------------------------------------------------

ANSWER: Done, see Printer.java file


üü° Yellow --------------------------------------------------------------------------------------------------

    5.  Make the print method static, and change the synchronized statement inside it to lock on the 
    Print class‚Äôs reflective Class object instead.

    For beauty, you should also change the threads to call static method Print.print() instead of 
    instance method p.print().
    ---------------------------------------------------------------------------------------------------------

ANSWER: Done see the printStatic method in the Printer.java file 

-------------------------------------------------------------------------------------------------------------
EXERCISE 1.4 

In Goetz chapter 1.1, three motivations for concurrency is given: resource utilization, fairness and 
convenience. One of the inventers of object oriented programming, Kristen Nygaard, once gave an 
alternative characterization of the different ways to use concurrency:

‚Ä¢ Exploitation of multiprocessors. The goal here is to exploit that the computer has multiplecores
  (or we have access to a number of physical computers). A good exploitation scheme makes it easy 
  to write programs to make efficient use of true parallelism.

‚Ä¢ Concealed parallelism. The goal here is to make it possible for several programs to share some    
  resources in a manner where each can act if they had sole ownership.

‚Ä¢ Intrinsic parallelism. The real world is intrinsically parallel. Computers who interact with the 
  real world need to deal with this. The goal here is to make it easy to write programs which 
  responds (in time) to input sensors or other connected devices.
------------------------------------------------------------------------------------------------------------
üü¢ Green ---------------------------------------------------------------------------------------------------

    Compare the categories of Kristen and Goetz, try to find three examples (if possible - if not possible, 
    argue why) of systems which are included in the categories of Goetz, but not in those of Kristen, and 
    vice versa.
    ---------------------------------------------------------------------------------------------------------

Resource utilization. Programs sometimes have to wait for external operations such as input or output, and while 
waiting can do no useful work. It is more efficient to use that wait time to let another program run.

Fairness. Multiple users and programs may have equal claims on the machine's resources. It is preferable to let 
them share the computer via finer grained time slicing than to let one program run to completion and then start another.

Convenience. It is often easier or more desirable to write several programs that each perform a single task and 
have them coordinate with each other as necessary than to write a single program that performs all the tasks.

ANSWER:
Exploitation of multiprocessors and resource utilization are two very similar concepts. The purpose of both of them is to
make the best use of the resources, so the computer is not 'idle'.

Concealed parallelism and fairness are very similar because they both deal with shared ownership over the computer's 
resources.

Example for intrinsic parallelism: rejsekort system, online check-in systems



üü° Yellow --------------------------------------------------------------------------------------------------

    Find examples of 3 systems in each of Kristens categories which you have used yourself 
    (as a programmer or user).
    ---------------------------------------------------------------------------------------------------------

ANSWER:
1.Streaming services, World Of Warcraft
2.GitHub, Google Drive
3.Rejsekort, online booking system, zoom

------------------------------------------------------------------------------------------------------------
EXERCISE 1.5 
------------------------------------------------------------------------------------------------------------
üü° Yellow --------------------------------------------------------------------------------------------------

    Consider the small artificial program in file TestLocking0.java. In class Mystery, the single mutable 
    field sum is private, and all methods are synchronized, so superficially the class seems to be thread-safe.

    1.  Compile the program and run it several times. Show the results you get. Do they indicate that class 
    Mystery is thread-safe or not?

    2.  Explain why class Mystery is not thread-safe. Hint: Consider (a) what it means for an instance 
    method to be synchronized, and (b) what it means for a static method to be synchronized.

    3.  Explain how you could make the class thread-safe, without changing its sequential behavior. 
    That is, you should not make any static field into an instance field (or vice versa), and you 
    should not make any static method into an instance method (or vice versa). Make the class 
    thread-safe, and rerun the program to see whether it works.
    --------------------------------------------------------------------------------------------------------

ANSWER:

1.5.1
        The result we are getting are different every time.
        Examples: 1899545.000000 / 1840081.000000 / 1848148.000000
        The class is not thread safe because it it uses a non static method to update a static 

1.5.2   The class is not thread safe because the two threads are updateting the state of the count simultaneously 
        One thread is locking the instance variable and another thread is locking the whole class.
        Even thougth they are synchromized then don't lock on the same thing. Hence they cannot take turns updating the count value 

1.5.3
        case 1: both threads should call the static synchromized method: public static synchronized void addStatic (double x)
                The static synchronized method will lock the class instead of the object.
                This also means that only onr thread can access the method at a time.
                The 1st thread will take the lock execute the method and relese the lock
                The 2st thread will then take the lock execute the method and relese the lock
                This rpocess will repeat itself multiple times
        case 2: both threads will call the non-static on the instance: public synchronized void addInstance (double x) 
                The instance synchromized methd will lock the instance, so only one thread at a time can modify the instance data
                This means that nly one thread at a time will be able to access the method and modify the instance variable
                The 1st thread will take the lock execute the method and relese the lock
                The 2st thread will then take the lock execute the method and relese the lock
                This rpocess will repeat itself multiple times
